# Cursor Rules — Pomodoro Productivity App (SwiftUI + MVVM)

These rules steer Cursor’s AI to **guide-only** setup and development of a minimalist, black-and-white Pomodoro productivity app using **SwiftUI + MVVM**, **Supabase** backend, and the roadmap defined below.

---
## 0) Operating Mode (Very Important)
**GUIDE-ONLY MODE**
- **Do NOT directly create, modify, or delete files** in the project.
- **Do NOT run commands** or apply changes automatically.
- Respond with **step-by-step instructions**, **code blocks**, and (when asked) **diff/patches**.
- Before proposing any change, **confirm the current state** and **ask for permission** to proceed.
- Only generate a unified diff patch when I explicitly say **"APPLY PATCH"**. Otherwise, provide steps and snippets only.
- If you are unsure about the project state, **ask targeted questions** instead of guessing.

**Interaction Keywords**
- **NEXT** → move to the next step in the current phase.
- **REPEAT** → repeat the last step more concisely.
- **APPLY PATCH** → output a unified diff (`diff -u` style) scoped to only the files touched in this step.
- **SKIP** → skip the current step and explain any tradeoffs.
- **STATUS** → summarize what’s done, what’s pending, and blockers.

---
## 1) Project Context & Constraints
- Platform: iOS 17+.
- UI: **SwiftUI**, monochrome (black & white), light/dark supported.
- Architecture: **MVVM** (with protocols and dependency injection where useful).
- Backend: **Supabase** (Sign in with Apple, sessions storage).
- Local store: SwiftData/Core Data optional in MVP; simple in-memory until Phase 3.
- Design principles: Minimalist, accessible, haptics on session transitions.

---
## 2) Desired Directory Layout (Target)
```
App/
  Core/
    AppViewModel.swift
    AppRouter.swift
    Models/ (Session.swift, TimerPreset.swift)
    Utilities/
  DesignSystem/
    Colors.swift
    Typography.swift
    Components/ (PrimaryButton.swift, MonoRingView.swift, MonoCard.swift)
  Data/
    Repository/
      SessionRepository.swift
      LocalSessionRepository.swift
      RemoteSessionRepository.swift
    Services/
      SessionSyncService.swift
      AuthService.swift
      AppPreferences.swift
  Features/
    Auth/ (AuthView.swift, AuthViewModel.swift)
    Timer/ (HomeView.swift, TimerView.swift, TimerViewModel.swift)
    Dashboard/ (DashboardView.swift, DashboardViewModel.swift)
    Profile/ (ProfileView.swift, ProfileViewModel.swift)
  App.swift
```
**Note:** This is the target shape. In MVP, create files only when we reach the relevant step and **after user confirmation**.

---
## 3) Coding Standards
- Swift 5.10+, iOS 17 SDK.
- Use `final class` for ViewModels, `struct` for Models.
- Use `@MainActor` on ViewModels interacting with UI state.
- Prefer composition over inheritance; protocols for repositories/services.
- Timer updates at 1 Hz using wall‑clock deltas (`Date`) to avoid drift.
- Public APIs: concise names; internal helpers as `private`.
- Always provide **brief KDocs-style** comments atop public types.
- Third‑party libraries are allowed if needed.

---
## 4) Security & Secrets
- Never hardcode Supabase keys in source; use **XCConfig** or build settings.
- Redact secrets in all logs and examples.
- When showing env setup, provide placeholders and instructions (not real keys).

---
## 5) Roadmap → Step-by-Step Guidance
Cursor must guide phase by phase. At each step:
1) **State Check** (ask me what exists).
2) **Explain Goal** (1–2 lines).
3) **Provide Steps** (numbered, with shell commands/UI clicks as needed).
4) **Provide Code** (smallest meaningful snippet per file).
5) **Ask to Proceed** (wait for confirmation or "APPLY PATCH").

### Phase 0 — Project Skeleton
**Goal:** Initialize clean repo, MVVM scaffolding, design tokens.
**Steps (guide-only):**
1. In Xcode: *File → New → App*, Name: `MonochromePomodoro`, Interface: SwiftUI, Language: Swift, Include Tests: ✓ (if desired).
2. Create git repo and first commit.
3. Add SPM packages if needed (optional): `swift-collections`, `SwiftLint`.
4. Create `App/Core/` and `App/DesignSystem/` folders.
5. Create stubs for `AppViewModel`, `AppRouter`, `Colors`, `Typography`, and basic `PrimaryButton`.
**Acceptance:** App compiles, shows placeholder timer text. Lint passes (if enabled).

### Phase 1 — Authentication + Local Settings
**Goal:** Sign in with Apple via Supabase, persist session.
**Steps:**
1. Create Supabase project in console.
2. Enable **Sign in with Apple** in Supabase & Apple Developer portal; add reverse client ID in Xcode Capabilities (Sign In with Apple).
3. Add `AuthService` with sign-in/sign-out & session persistence (Keychain).
4. Add `AuthViewModel` + `AuthView` with a monochrome Sign in with Apple button.
5. Route: unauthenticated → `AuthView`, authenticated → `HomeView`.
**Acceptance:** Relaunch preserves session; sign out returns to AuthView.

### Phase 2 — Timer MVP (Core)
**Goal:** Working focus→break flow with presets.
**Steps:**
1. Define models: `TimerPreset`, `SessionType`, `Session` (in-memory only).
2. Implement `TimerViewModel` (start/pause/resume/reset/skipBreak + state machine).
3. Build `HomeView` with big timer, preset picker (25/30/35/45/50), start/pause/reset.
4. Add basic haptics on start/end.
**Acceptance:** Presets run; auto short break; monochrome UI.

### Phase 3 — Profile & Dashboard (Local Stats)
**Goal:** Today/Week totals, streaks.
**Steps:**
1. `DashboardViewModel` computes daily/weekly totals & streaks from in-memory sessions.
2. `DashboardView` shows ring for daily goal & simple weekly bars.
3. `ProfileView` shows display name (Apple) + sign-out.
**Acceptance:** Completing sessions updates stats live.

### Phase 4 — Supabase Sync (History)
**Goal:** Persist sessions to backend; sync on login/foreground.
**Steps:**
1. Supabase schema: `profiles`, `sessions`.
2. `SessionRepository` protocol; `LocalSessionRepository` + `RemoteSessionRepository` (Supabase).
3. `SessionSyncService` for two-way sync (server as source of truth for conflicts).
**Acceptance:** Reinstall → sign in → history restored & dashboard matches.

### Phase 5 — iOS Niceties
**Goal:** Feel native without complexity.
**Steps:**
1. Live Activity / Lock Screen for active session.
2. Local notifications for session/break end.
3. Background accuracy with `Date` diffs.
**Acceptance:** Lock screen shows timer; notifications fire correctly.

### Phase 6 — Settings & Customization
**Goal:** Custom durations, strict/gentle, daily goal, sound/haptics.
**Steps:**
1. Settings screen; persist with `AppPreferences`.
2. Enforce strict mode (disable pause).
**Acceptance:** Custom durations selectable & persist.

### Phase 7 — Analytics & Export (Stretch)
**Goal:** Deeper stats + CSV export.
**Steps:**
1. Compute top tags, averages, longest streak.
2. Generate CSV and expose Share Sheet.
**Acceptance:** CSV columns: id, type, start_at, end_at, duration_sec, tag.

---
## 6) Quality Gates Before Moving On
- Compiles without warnings for changed files.
- Basic unit test (if applicable) added for new ViewModel logic.
- UI verified in both Light and Dark mode.
- Minimal accessibility labels added for interactive controls.

---
## 7) Testing Guidelines (MVP)
- ViewModels: deterministic unit tests for state machine transitions.
- Repositories: mock Remote repo to test sync flows.
- Snapshot tests optional for key views (keep monochrome constraints).

---
## 8) Git & Commits
- Commit early, one task per commit.
- Conventional style: `feat(timer): add start/pause/resume`, `chore: add typography tokens`.
- Include a short rationale in body if non-obvious.

---
## 9) Accessibility & UX
- Dynamic Type compatibility (at least up to `XL`).
- Haptics: default system haptics on session start/end.

---
## 10) When In Doubt
- Ask for the current state (files present, errors, screenshots).
- Prefer the **smallest next step**.
- Reconfirm monochrome constraints and minimal design.

---
## 11) Out of Scope for MVP
- Advanced charts, team/social features, calendar/reminders sync, AI suggestions.

---
## 12) Supabase Setup (Guide-Only Snippet)
- Project URL, anon/public key via XCConfig. Example:
```
// Config/Secrets.xcconfig (do not commit real values)
SUPABASE_URL = https://YOUR-PROJECT.supabase.co
SUPABASE_ANON_KEY = YOUR_PUBLIC_ANON_KEY
```
- In code, read via `Bundle.main.object(forInfoDictionaryKey:)` or compile-time flags.
- Ensure RLS policies protect `sessions` by `user_id`.

---
## 13) Definition Sketches (for reference only)
```swift
// Models
struct TimerPreset: Identifiable, Hashable { let id: UUID; let name: String; let minutes: Int }
enum SessionType: String { case focus, shortBreak, longBreak }
struct Session: Identifiable, Hashable { let id: UUID; let type: SessionType; let startAt: Date; let endAt: Date; let tag: String? }

// Repository Protocol
protocol SessionRepository {
  func getSessions(from: Date?, to: Date?) async throws -> [Session]
  func save(_ session: Session) async throws
  func delete(id: UUID) async throws
}

// ViewModel Skeleton
@MainActor
final class TimerViewModel: ObservableObject {
  @Published var remainingSeconds: Int = 0
  @Published var isRunning = false
  @Published var phase: SessionType = .focus
  @Published var selectedPreset: TimerPreset = .init(id: .init(), name: "25", minutes: 25)
  func start(preset: TimerPreset) {}
  func pause() {}
  func resume() {}
  func reset() {}
  func skipBreak() {}
}
```

---
**End of rules. Remain in GUIDE-ONLY MODE until explicitly told otherwise.**
